{"ast":null,"code":"var _jsxFileName = \"/home/farah/Desktop/meya2/client/src/components/Users.js\",\n  _s = $RefreshSig$();\n// src/UserList.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserList = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Function to fetch user data from the Flask backend\n    const fetchUserData = async () => {\n      try {\n        // Retrieve the JWT token from your preferred authentication method\n        // (e.g., Redux, local storage, or React context)\n        const token = 'YOUR_VALID_JWT_TOKEN_HERE'; // Replace with your JWT token\n\n        // Make a GET request to the Flask /user endpoint with the JWT token\n        const response = await axios.get('http://localhost:5000/user', {\n          headers: {\n            'x-access-token': token\n          }\n        });\n        if (response.data && response.data.users) {\n          setUsers(response.data.users);\n        } else {\n          console.error('No users found.');\n        }\n      } catch (error) {\n        setError('Error fetching user data: ' + error.message);\n        console.error('Error fetching user data:', error);\n      }\n    };\n\n    // Call the fetchUserData function\n    fetchUserData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Name: \", user.name, \", Email: \", user.email]\n      }, user.public_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(UserList, \"W8dPUmt9Ai9400zDPm7RH8jUmB4=\");\n_c = UserList;\nexport default UserList;\nvar _c;\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","UserList","_s","users","setUsers","error","setError","fetchUserData","token","response","get","headers","data","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","user","name","email","public_id","_c","$RefreshReg$"],"sources":["/home/farah/Desktop/meya2/client/src/components/Users.js"],"sourcesContent":["// src/UserList.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst UserList = () => {\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Function to fetch user data from the Flask backend\n    const fetchUserData = async () => {\n      try {\n        // Retrieve the JWT token from your preferred authentication method\n        // (e.g., Redux, local storage, or React context)\n        const token = 'YOUR_VALID_JWT_TOKEN_HERE'; // Replace with your JWT token\n\n        // Make a GET request to the Flask /user endpoint with the JWT token\n        const response = await axios.get('http://localhost:5000/user', {\n          headers: {\n            'x-access-token': token,\n          },\n        });\n\n        if (response.data && response.data.users) {\n          setUsers(response.data.users);\n        } else {\n          console.error('No users found.');\n        }\n      } catch (error) {\n        setError('Error fetching user data: ' + error.message);\n        console.error('Error fetching user data:', error);\n      }\n    };\n\n    // Call the fetchUserData function\n    fetchUserData();\n  }, []);\n\n  return (\n    <div>\n      <h1>User List</h1>\n      {error ? (\n        <div className=\"text-red-500\">{error}</div>\n      ) : (\n        <ul>\n          {users.map((user) => (\n            <li key={user.public_id}>\n              Name: {user.name}, Email: {user.email}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default UserList;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA;QACA,MAAMC,KAAK,GAAG,2BAA2B,CAAC,CAAC;;QAE3C;QACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,4BAA4B,EAAE;UAC7DC,OAAO,EAAE;YACP,gBAAgB,EAAEH;UACpB;QACF,CAAC,CAAC;QAEF,IAAIC,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACT,KAAK,EAAE;UACxCC,QAAQ,CAACK,QAAQ,CAACG,IAAI,CAACT,KAAK,CAAC;QAC/B,CAAC,MAAM;UACLU,OAAO,CAACR,KAAK,CAAC,iBAAiB,CAAC;QAClC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,QAAQ,CAAC,4BAA4B,GAAGD,KAAK,CAACS,OAAO,CAAC;QACtDD,OAAO,CAACR,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;;IAED;IACAE,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjBd,KAAK,gBACJL,OAAA;MAAKoB,SAAS,EAAC,cAAc;MAAAL,QAAA,EAAEV;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAE3CnB,OAAA;MAAAe,QAAA,EACGZ,KAAK,CAACkB,GAAG,CAAEC,IAAI,iBACdtB,OAAA;QAAAe,QAAA,GAAyB,QACjB,EAACO,IAAI,CAACC,IAAI,EAAC,WAAS,EAACD,IAAI,CAACE,KAAK;MAAA,GAD9BF,IAAI,CAACG,SAAS;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEnB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CAlDID,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAoDd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}